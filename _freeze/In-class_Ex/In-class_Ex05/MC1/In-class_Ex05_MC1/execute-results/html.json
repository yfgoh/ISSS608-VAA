{
  "hash": "dcbd0de50c47b4e79846f2fc6ad712ab",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 5 Mini Challenge 1\"\nauthor: \"Yi Fang\"\ndate: \"May 17, 2025\"\ndate-modified: \"last-modified\"\nformat: html\neditor: visual\nfreeze: true\nwarning: false\n---\n\n\n\n# Getting Started\n\nIn the code chunk below, p_load() of pacman package is used to load the R packages into R environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(jsonlite, tidyverse, SmartEDA, tidygraph, ggraph)\n```\n:::\n\n\n\n## Importing Knowledge Graph Data\n\nIn the code chunk below, `fromJSON()` of **jsonlite** package is used to import *MC1_graph.json* file into R and save the output object.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkg <- fromJSON(\"data/MC1_graph.json\")\n```\n:::\n\n\n\n### Inspect structure\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(kg, max.level = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame':\t17412 obs. of  10 variables:\n $ links     :'data.frame':\t37857 obs. of  4 variables:\n```\n\n\n:::\n:::\n\n\n\n### Extract and inspect\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_tbl <- as_tibble(kg$nodes)\nedges_tbl <- as_tibble(kg$links)\n```\n:::\n\n\n\n## Initial EDA\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex05_MC1_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex05_MC1_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## Creating Knowledge Graph\n\nThis is \n### Step 1: Mapping node id to row index\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid_map <- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n```\n:::\n\n\n\nThis ensures each id from node list is mapped to the correct number.\n\n### Step 2: Map source and target IDs to row indices\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- edges_tbl %>%\n  left_join(id_map, by = c(\"source\" = \"id\")) %>%\n  rename(from = index) %>%\n  left_join(id_map, by = c(\"target\" = \"id\")) %>%\n  rename(to = index)\n```\n:::\n\n\nThe number of observations in edges_tbl should be the same as before running this code chunk.\n\nBefore doing leftjoin, there are only 4 variables. AFter doing the leftjoin, there is two additional variables.\n\n### Step 3: Filter out any unmatched\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- edges_tbl %>%\n  filter(!is.na(from),!is.na(to))\n```\n:::\n\n\nThis will get rid of any missing values.\n\n### Step 4: Creating the graph\nLastly, `tbl_graph()` is used to create tidygraph's graph object by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph <- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)\n```\n:::\n\n\nDirected will be plugged from kg table's directed column.\n\n## Visualising the knowledge graph\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\nThis is to ensure reproducibility. \n### Visualising the Whole Graph\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph, layout = \"fr\") + \n  geom_edge_link(alpha = 0.3,               # line, alpha is transparency \n                 colour = \"gray\") + \n  geom_node_point(aes(color = `Node Type`), # point (plot after line so that it doesn't get covered by line)\n                  size = 4) +               # size of point  \n  geom_node_text(aes(label = name),         # label using name\n                 repel = TRUE,              # prevent overlapping names, force words apart\n                 size = 2.5) +\n  theme_void()\n```\n:::\n\n\n\n### Visualising the sub-graph\nIn this section, we are interested to create a sub-graph base on *MemberOf* vaue in *Edge Type* column of the *edges* data frame.\n\n#### Step 1: Filter edges to only \"MemberOf\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <- graph %>%\n  activate(edges) %>%                     # Focus on edges table\n  filter(`Edge Type` == \"MemberOf\")       # Filter to Memberof\n```\n:::\n\n\n\n#### Step 2: Extract only connected nodes (i.e., used in these edges)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nused_nodes_indices <- graph_memberof %>%\n  activate(edges) %>%\n  as_tibble() %>%\n  select(from,to) %>%            # Only selected variables\n  unlist() %>%                  # beCause it is a graph model, not a list\n  unique()\n```\n:::\n\n\nThis is to eliminate orphan nodes.\n\n#### Step 3: Keep only those nodes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <- graph_memberof %>%\n  activate(nodes) %>% \n  mutate(row_id = row_number()) %>%\n  filter(row_id %in% used_nodes_indices) %>%\n  select(-row_id)  # optional clean up\n```\n:::\n\n\n\n#### Plot the sub-graph\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph_memberof,\n       layout = \"fr\") + \n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex05_MC1_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::",
    "supporting": [
      "In-class_Ex05_MC1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}