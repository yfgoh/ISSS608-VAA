{
  "hash": "eebb80997868b0a709725ae11f9a5ebc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 1\"\nauthor: \"Yi Fang\"\ndate: \"April 30, 2025\"\ndate-modified: \"last-modified\"\nformat: html\neditor: visual\nfreeze: true\nwarning: false\n---\n\n\n\n## 1 Overview\n\n### 1.1 Background\n\nWith reference to [Singstat](https://www.singstat.gov.sg/find-data/search-by-theme/population/population-and-population-structure/latest-data), Singapore’s resident population, consisting of citizens and permanent residents, stands at 4.18 million in 2024, with close to 20% of residents aged 65 and above. The population is distributed across 55 planning areas and 332 subzones. Due to the nation’s limited land space, the majority of its highly urbanized residents live in densely populated areas, a trend that will play a crucial role in shaping the country’s future policies and growth.\n\n### 1.2 Objectives\n\nThis exercise will assume the role of a graphical editor of a media company planning to release an article on demographic structures and distribution of Singapore in 2024.\n\nThe data will be processed by using appropriate **tidyverse** family of packages and the data visualisation will be prepared using **ggplot2** and its extensions.\n\n## 2 Getting started\n\n### 2.1 Load packages\n\nThe following R packages will be loaded using the `pacman::p_load()` function.\n\n-   ggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\n\n-   ggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\n\n-   hrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\n\n-   patchwork: an R package for preparing composite figure created using ggplot2.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse, ggplot2, dplyr, scales) \n```\n:::\n\n\n\n### 2.2 Import data\n\nThis exercise will be using *Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024* dataset shared by [Department of Statistics, Singapore (DOS)](https://www.singstat.gov.sg/) Proceed to load the dataset with the following code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrespop_data <- read_csv(\"data/respopagesex2024.csv\")\n```\n:::\n\n\n\n## 3 Data Wrangling\n\nUsing `glimpse()` function, we get an overview of the dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(respop_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 60,424\nColumns: 6\n$ PA   <chr> \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   <chr> \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  <chr> \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  <chr> \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  <dbl> 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time <dbl> 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n```\n\n\n:::\n:::\n\n\n\nWe see that the dataset has 60,424 rows with 6 columns. It also shows the data type for each column.\n\n### 3.1 Check for duplicates\n\nUsing the duplicated function, we check for duplicates in the dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrespop_data[duplicated(respop_data),]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 6\n# ℹ 6 variables: PA <chr>, SZ <chr>, Age <chr>, Sex <chr>, Pop <dbl>,\n#   Time <dbl>\n```\n\n\n:::\n:::\n\n\n\nAs indicated in the results, there are no duplicates.\n\n### 3.2 Check for missing values\n\nUsing the code below, we will check for missing values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(column_name in names(respop_data)) {\n  na_count <- sum(is.na(respop_data[[column_name]]))\n\n  if (na_count > 0) {\n    message(\"Column '\", column_name, \"' has \", na_count, \" NA values.\")\n  }\n}\n```\n:::\n\n\n\n### 3.3 Filtering data\n\nFor Age column, it is categorical as 90 and above are grouped into one category. For this exercise, '90 and above' was excluded to ensure that Age could be treated as a numeric variable. This allows for proper analysis and visualisation. The following code will exclude 90 and above and cast Age as numeric.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrespop_data_clean <- respop_data %>%\n  filter(Age != \"90_and_Over\") %>%\n  mutate(Age = as.numeric(Age))\n```\n:::\n\n\n\n## 4 Data visualisation\n\n### 4.1 Age-Sex Pyramid on a National Level\n\n::: panel-tabset\n## The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## The code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnational_data <- respop_data_clean %>%\n  group_by(Age, Sex) %>%\n  summarise(Total = sum(Pop, na.rm = TRUE), .groups = 'drop') %>%\n  mutate(\n    Age = as.integer(Age),\n    Total = ifelse(Sex == \"Males\", -Total, Total)  # Make male population negative for pyramid\n  )\n\n# Plot the age-sex pyramid with vertical lines at Age 65 and 18\nggplot(national_data, aes(x = Age, y = Total, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +  # Flip the plot to create a pyramid shape\n  scale_y_continuous(labels = scales::comma_format(accuracy = 1), breaks = scales::pretty_breaks()) +  # Format y-axis\n  labs(\n    title = \"Singapore Population Pyramid (2024)\",\n    x = \"Age\",\n    y = \"Population\",\n    fill = \"Sex\"\n  ) +\n  theme_minimal() +  # Clean minimal theme\n  \n  # Add vertical lines at Age 65 and Age 18\n  geom_vline(xintercept = 65, linetype = \"dashed\", color = \"black\", size = 1) +\n  geom_vline(xintercept = 42.8, linetype = \"dashed\", color = \"black\", size = 1) +\n  \n  # Optionally, add text annotations for the lines\n  annotate(\"text\", x = 65, y = 0, label = \"Age 65\", color = \"black\", vjust = -0.5, hjust = -0.1) +\n  annotate(\"text\", x = 42.8, y = 0, label = \"Median Age = 42.8\", color = \"black\", vjust = -0.5, hjust = -0.1)\n```\n:::\n\n\n:::\n\n### 4.2 Proportion of males and females within each age group\n\n::: panel-tabset\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## The code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare data: group and compute proportions within each age\nstacked_data <- respop_data_clean %>%\n  group_by(Age, Sex) %>%\n  summarise(Pop = sum(Pop, na.rm = TRUE), .groups = \"drop\") %>%\n  group_by(Age) %>%\n  mutate(Proportion = Pop / sum(Pop)) %>%\n  ungroup()\n\n# Plot 100% stacked bar chart\nggplot(stacked_data, aes(x = as.integer(Age), y = Proportion, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  scale_y_continuous(labels = percent_format()) +\n  scale_x_continuous(breaks = seq(0, 90, 10)) +\n  labs(\n    title = \"Age-Sex Distribution (100% Stacked Bar) – Singapore 2024\",\n    x = \"Age\",\n    y = \"Proportion within Age Group\",\n    fill = \"Sex\"\n  ) +\n  theme_minimal()\n```\n:::\n\n\n\n:::\n\n",
    "supporting": [
      "Take-home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}