---
title: "TestMC1"
format: html
---


## 1.2 Tasks and Questions

1.  Design and develop visualizations and visual analytic tools that will allow Silas to explore and understand the profile of Sailor Shift’s career

    -   Who has she been most influenced by over time?
    -   Who has she collaborated with and directly or indirectly influenced?
    -   How has she influenced collaborators of the broader Oceanus Folk community?

2.  Develop visualizations that illustrate how the influence of Oceanus Folk has spread through the musical world.

    -   Was this influence intermittent or did it have a gradual rise?
    -   What genres and top artists have been most influenced by Oceanus Folk?
    -   On the converse, how has Oceanus Folk changed with the rise of Sailor Shift? From which genres does it draw most of its contemporary inspiration?

3.  Use your visualizations to develop a profile of what it means to be a rising star in the music industry.

    -   Visualize the careers of three artists. Compare and contrast their rise in popularity and influence.
    -   Using this characterization, give three predictions of who the next Oceanus Folk stars with be over the next five years.

## 1.3 Data Source

The data for this exercise is from [VAST 2025 MC1](https://github.com/vast-challenge/2025-data/blob/main/MC1_release.zip).

## 1.4 Data Description

Graph Description - Directed Multigraph - \# nodes: 17,412 - \# edges: 37, 857 - 18 connected components - Possible node types are: {Person, Song, RecordLabel, Album, MusicalGroup} - Possible edge types are: {MemberOf, PerformerOf, ComposerOf, ProducerOf, LyricistOf, InStyleOf, InterpolatesFrom, CoverOf, LyricalReferenceTo, DirectlySamples, RecordedBy, DistributedBy} - The graph format is a JSON file. The root-level JSON object consists of graph-level properties specifying that it is directed and a multigraph, a “nodes” key which holds the list of nodes, and a “links” key which holds the list of edges.

The data for this challenge comes from two different sources:

-   an online, crowdsourced repository of musical influence, where contributors have manually notated instances in which songs or albums have sampled, covered, or otherwise drawn inspiration from previous work.
-   aggregate-level descriptions of song popularity, as labeled by our journalist, Silas Reed. These notations (notable and notoriety_date) are directly based on both the number of sales and streams that the song/album has achieved as well as the whether or not the work landed on a top record chart.

## 1.5 Install and Load the Required Libraries

Utility Tools

-   jsonlite: To parse JSON
-   tidyverse - Data science tools
-   ggtext - Tools for text formatting
-   knitr - For better table displays
-   lubridate - For processing date and time

Graphing Tools

-   patchwork - For combining ggplot plots
-   ggraph - For plotting network data
-   tidygraph - For graph manipulations
-   igraph - Contains functions for network analysis
-   ggiraph - Interactive plots

::: {.callout-note appearance="minimal" collapse="true"}
## Code

```{r}
#| code-fold: true
#| code-summary: "Show code"
pacman::p_load(jsonlite, tidyverse, ggtext,
                knitr, lubridate, patchwork,
                ggraph, tidygraph, igraph,
                ggiraph)
```
:::

## [1-1:]1.6 Importing Data

For the purpose of this exercise, a data file called *MC1_graph* will be used. The code chunk below imports *respopagesex2024.csv* into R environment by using *read_csv()* function of *readr* package (under *tidyverse*).

::: {.callout-note appearance="minimal" collapse="true"}
## Code

```{r}
#| code-fold: true
#| code-summary: "Show code"
mc1_data <- fromJSON("MC1/data/MC1_graph.json")
glimpse(mc1_data)
```
:::

### Separating into node and edge data

```{r}
mc1_nodes_raw <- as_tibble(mc1_data$nodes)

glimpse(mc1_nodes_raw)

kable(head(mc1_nodes_raw, 5))
```

```{r}
mc1_edges_raw <- as_tibble(mc1_data$links)

glimpse(mc1_edges_raw)

kable(head(mc1_edges_raw, 10))
```

# [2:]{style="color:DarkOrange"} 2 Exploratory Data Analysis (EDA)

### Exploring Node

```{r}
mc1_nodes_raw$release_date %>% unique()

mc1_nodes_raw %>%
  filter(grepl("Sailor Shift", name)) #Sailor Shift is in name column and not in stage_name column
```

```{r}
mc1_nodes_clean <- mc1_nodes_raw %>%
  mutate(
    released_year = as.integer(release_date),
    name = gsub("'", "", name)) %>% # igraph interactive cannot have ' inside name
  select(`Node Type`, name, released_year, genre, notable, id)
  
kable(head(mc1_nodes_clean))
```

### Exploring Edges

```{r}
range(mc1_edges_raw$source)

range(mc1_edges_raw$target) #Similar range as nodes
```

### Mapping from node name to edges indexes

igraph uses the from and to columns in the edges and matches them with the name column in nodes. Will replace the numerical from and to columns in edges with the names used in the nodes.

```{r}
id_map <- mc1_nodes_clean %>%
  select(name, id)

id_map
```

#### Map source and target to node name

```{r}
mc1_edges_clean <- mc1_edges_raw %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from = name) %>%
  left_join(id_map, by = c("target" = "id")) %>%
  rename(to = name)

mc1_edges_clean
```

```{r}
mc1_edges_clean <- mc1_edges_clean %>%
  select(from, to, `Edge Type`)

mc1_edges_clean
```

### Filter out any unmatched (invalid) edges

```{r}
mc1_edges_clean <- mc1_edges_clean %>%
  filter(!is.na(from), !is.na(to))
```

### Checking for any missing nodes

```{r}
missing_nodes <- setdiff(
  unique(c(mc1_edges_clean$from, mc1_edges_clean$to)),
  mc1_nodes_clean$name
)

missing_nodes
```

### Adding Weight to Edges

```{r}
mc1_edges_format <- mc1_edges_clean %>%
  group_by(`Edge Type`, from, to) %>%
  summarize(weight = n())

glimpse(mc1_edges_format)

kable(head(mc1_edges_format))
```

```{r}
range(mc1_edges_format$weight) #the max weight is only 2 so this grouping by is not useful. Will use mc1_edges_clean instead
```

### Visualising Edge Type

```{r}
ggplot(data = mc1_edges_clean,
       aes(y = `Edge Type`)) +
  geom_bar()
```

## Creating the global knowledge graph
`tbl_graph()` is used to create tidygraph's graph object by using the code chunk below

```{r}
music = tbl_graph(edges = mc1_edges_clean,
                             nodes = mc1_nodes_clean,
                             directed = TRUE)
```

```{r}
set.seed(1234)
```

## Question 1a Who has she been most influenced by over time?

How do I find who is she influenced by?

```{r}
# Convert tbl_graph to igraph
ig <- as.igraph(music)

# Get index for 'Sailor Shift'
sailor_idx <- which(V(ig)$name == "Sailor Shift")

# Get 2-degree ego neighbourhood
neighbourhood_nodes <- ego(ig, order = 2, nodes = sailor_idx, mode = "out")[[1]]

# Step 2: Get 2-degree in-neighbours to those filtered out-neighbours
in_to_out_neighbours <- unique(unlist(
  lapply(neighbourhood_nodes, function(n) {
    ego(ig, order = 1, nodes = n, mode = "in")[[1]]
  })
))

# Step 3: Combine all relevant nodes (Sailor Shift + out-neighbours + their 2-degree in-neighbours)
all_nodes <- unique(c(sailor_idx, neighbourhood_nodes, in_to_out_neighbours))

# Induce subgraph and convert to tbl_graph
sub_music <- induced_subgraph(ig, vids = all_nodes) %>% 
  as_tbl_graph()

# Convert to igraph for path computation
ig_sub <- as.igraph(sub_music)

# Re-identify 'Sailor Shift' in the new graph
sailor_idx_sub <- which(V(ig_sub)$name == "Sailor Shift")

# Compute shortest paths from Sailor Shift
sp <- shortest_paths(ig_sub, from = sailor_idx_sub, mode = "out", output = "vpath")$vpath

# Count path dependencies (with safety for unreachable nodes)
node_names <- V(ig_sub)$name
dep_score <- sapply(node_names, function(n) {
  sum(sapply(sp, function(path) {
    if (length(path) == 0) return(FALSE)
    n %in% names(path)
  }))
})

# Attach to tbl_graph
sub_music <- sub_music %>%
  mutate(sailor_dependency = dep_score)
```
```{r}
pacman::p_load(extrafont)
font_import()
loadfonts(device = "win")

```

```{r}
g <- sub_music %>%
  ggraph(layout = "fr") + 
  geom_edge_fan(
    aes(
      colour = `Edge Type`,
      start_cap = circle(1, 'mm'),
      end_cap = circle(1, 'mm')
      ),
    arrow = arrow(length = unit(2, 'mm')),
    alpha = 0.4
    ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      tooltip = sprintf("%s<br/>(%s)", name, released_year),
      colour = genre,
      size = sailor_dependency,
      shape = `Node Type`
      ),
    show.legend = c(size = FALSE)
    )+ 
  geom_node_text(
    aes(
      label = ifelse(`name` == "Sailor Shift", "Sailor Shift", NA)
    ),
    size = 4,
    colour = 'red',
    show.legend = FALSE
    ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_shape_discrete(name = "Node Type")
g <- g + theme_minimal(base_family = "sans")

girafe(ggobj = g, width_svg = 10, height_svg = 9)
```

```{r}
# Extract node data
node_data <- as_tibble(sub_music)

# View top 5 nodes with highest sailor_dependency
node_data %>%
  arrange(desc(sailor_dependency)) %>%
  head(5) %>%
  select(`Node Type`, name, sailor_dependency) %>%
  kable()
```

## 1.b Who has she collaborated with and directly or indirectly influenced?

### Directly

Find all immediate people and musical groups Sailor Shift directly influenced

```{r}
# Convert tbl_graph to igraph
ig <- as.igraph(music)

# Get index for 'Sailor Shift'
sailor_idx <- which(V(ig)$name == "Sailor Shift")

# Get 1-degree in ego neighbourhood
neighbourhood_nodes <- ego(ig, order = 1, nodes = sailor_idx, mode = "in")[[1]]

# Induce subgraph and convert to tbl_graph
sub_music <- induced_subgraph(ig, vids = neighbourhood_nodes) %>% 
  as_tbl_graph()
```

```{r}
g <- sub_music %>%
  ggraph(layout = "fr") + 
  geom_edge_fan(
    aes(
      colour = `Edge Type`,
      start_cap = circle(2, 'mm'),
      end_cap = circle(2, 'mm')
      ),
    arrow = arrow(length = unit(2, 'mm')),
    alpha = 0.4
    ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      tooltip = sprintf("%s<br/>(%s)", name, released_year),
      colour = genre,
      shape = `Node Type`
      ),
    show.legend = c(size = FALSE)
    )+ 
  geom_node_text(
    aes(
      label = ifelse(`name` == "Sailor Shift", "Sailor Shift", NA)
    ),
    size = 4,
    colour = 'red',
    show.legend = FALSE
    ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_shape_discrete(name = "Node Type")
g <- g + theme_minimal(base_family = "sans")
girafe(ggobj = g, width_svg = 8, height_svg = 6)
```

```{r}
# Extract node data
node_data <- as_tibble(sub_music)

node_data %>%
  filter(`Node Type` %in% c("Person", "MusicalGroup")) %>%
  select(`Node Type`, name) %>%
  kable()
```

## 1.2 Indirect

Find all the songs and albums that Sailor Shift produced, then get 2 degree in neighbours from the songs / albums to see who has been influenced by her songs or made songs influenced by her songs or have direct collaboration with her

```{r}
# Step 1: Get Sailor Shift's 1-degree out-neighbours
sailor_idx <- which(V(ig)$name == "Sailor Shift")
out_edges <- incident(ig, sailor_idx, mode = "out")

# Filter edges by desired Edge Type
valid_edge_types <- c("PerformerOf", "ComposerOf", "ProducerOf", "LyricistOf", "MemberOf")
valid_edges <- out_edges[E(ig)[out_edges]$`Edge Type` %in% valid_edge_types]

# Get target nodes from valid edges
out_neighbours <- as.integer(ends(ig, valid_edges, names = FALSE)[, 2])  # target vertex of each edge

# Filter to only songs or albums
out_neighbours <- out_neighbours[
  V(ig)[out_neighbours]$`Node Type` %in% c("Song", "Album")
]

# Step 2: Get 1-degree in-neighbours to those filtered out-neighbours
in_to_out_neighbours <- unique(unlist(
  lapply(out_neighbours, function(n) {
    ego(ig, order = 1, nodes = n, mode = "in")[[1]]
  })
))

# Step 3: Combine all relevant nodes (Sailor Shift + out-neighbours + their 2-degree in-neighbours)
all_nodes <- unique(c(sailor_idx, out_neighbours, in_to_out_neighbours))

# Step 4: Induce subgraph over combined nodes
subgraph <- induced_subgraph(ig, vids = all_nodes)
sub_music <- as_tbl_graph(subgraph)

# Convert to igraph for path computation
ig_sub <- as.igraph(sub_music)

# Re-identify 'Sailor Shift' in the new graph
sailor_idx_sub <- which(V(ig_sub)$name == "Sailor Shift")

# Compute shortest paths from Sailor Shift (all directions in subgraph)
sp <- shortest_paths(ig_sub, from = sailor_idx_sub, mode = "all", output = "vpath")$vpath

# Count path dependencies (including Sailor Shift)
node_names <- V(ig_sub)$name
dep_score <- sapply(node_names, function(n) {
  sum(sapply(sp, function(path) {
    if (length(path) == 0) return(FALSE)
    n %in% names(path)
  }))
})

# Attach path dependency score to graph
sub_music <- sub_music %>%
  mutate(sailor_dependency = dep_score)
```

```{r}
g <- sub_music %>%
  ggraph(layout = "fr") + 
  geom_edge_fan(
    aes(
      colour = `Edge Type`,
      start_cap = circle(2, 'mm'),
      end_cap = circle(2, 'mm')
      ),
    arrow = arrow(length = unit(2, 'mm')),
    alpha = 0.4
    ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      tooltip = sprintf("%s<br/>(%s)", name, released_year),
      colour = genre,
      size = sailor_dependency,
      shape = `Node Type`
      ),
    show.legend = c(size = FALSE)
    )+ 
  geom_node_text(
    aes(
      label = ifelse(`name` == "Sailor Shift", "Sailor Shift", NA)
    ),
    size = 4,
    colour = 'red',
    show.legend = FALSE
    ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_shape_discrete(name = "Node Type")
g <- g + theme_minimal(base_family = "sans")
girafe(ggobj = g, width_svg = 8, height_svg = 6)
```

```{r}
# Extract node data
node_data <- as_tibble(sub_music)

node_data %>%
  filter(`Node Type` %in% c("Person", "MusicalGroup")) %>%
  arrange(desc(sailor_dependency)) %>%
  select(`Node Type`, name) %>%
  kable()
```

## 1.c How has she influenced collaborators of the broader Oceanus Folk community?

### Sailor centric

```{r}
# Convert tbl_graph to igraph
ig <- as.igraph(music)

# Get index for 'Sailor Shift'
sailor_idx <- which(V(ig)$name == "Sailor Shift")

# Get 1-degree ego from Sailor Shift (as integer indices)
sailor_ego <- ego(ig, order = 1, nodes = sailor_idx, mode = "out")[[1]]

sailor_ego_idx <- as.integer(sailor_ego)

# Get indices for all Oceanus Folk nodes
oceanus_idx <- which(V(ig)$genre == "Oceanus Folk")

# Get 1-degree inward ego for each Oceanus Folk node
oceanus_ego_list <- ego(ig, order = 1, nodes = oceanus_idx, mode = "in")

# Flatten and convert to integer indices
oceanus_ego_idx <- unique(unlist(lapply(oceanus_ego_list, as.integer)))

# Combine both sets of indices
combined_indices <- unique(c(sailor_ego_idx, oceanus_ego_idx))

# Induce subgraph from combined set
sub_music <- induced_subgraph(ig, vids = combined_indices) %>%
  as_tbl_graph()

# Convert to igraph for path computation
ig_sub <- as.igraph(sub_music)

# Re-identify Sailor Shift index in subgraph
sailor_idx_sub <- which(V(ig_sub)$name == "Sailor Shift")

# Compute shortest paths *to* Sailor Shift (mode = "in")
sp <- shortest_paths(ig_sub, from = sailor_idx_sub, mode = "in", output = "vpath")$vpath

# Count path dependencies
node_names <- V(ig_sub)$name
dep_score <- sapply(node_names, function(n) {
  sum(sapply(sp, function(path) {
    if (length(path) == 0) return(FALSE)
    n %in% names(path)
  }))
})

# Add sailor_dependency to tbl_graph
sub_music <- sub_music %>%
  mutate(sailor_dependency = dep_score)
```

```{r}
g <- sub_music %>%
  ggraph(layout = "nicely") + 
  geom_edge_fan(
    aes(
      colour = `Edge Type`,
      start_cap = circle(1, 'mm'),
      end_cap = circle(1, 'mm')
      ),
    arrow = arrow(length = unit(2, 'mm')),
    alpha = 0.4
    ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      tooltip = sprintf("%s<br/>(%s)", name, released_year),
      colour = genre,
      size = sailor_dependency,
      shape = `Node Type`
      ),
    show.legend = c(size = FALSE)
    )+ 
  geom_node_text(
    aes(
      label = ifelse(`name` == "Sailor Shift", "Sailor Shift", NA)
    ),
    size = 4,
    colour = 'red',
    show.legend = FALSE
    ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_shape_discrete(name = "Node Type")
g <- g + theme_minimal(base_family = "sans")
girafe(ggobj = g, width_svg = 11, height_svg = 8)
```