---
title: "Take-home Exercise 2"
format: html
---

# 1 Overview

This take-home exercise will select one of challenges from the [VAST Challenge 2025](https://vast-challenge.github.io/2025/MC1.html) and provide solutions to the challenge.

# 2 Objective

VAST Challenge 2025's Mini-Challenge 1 has the following tasks and questions.

1.  Design and develop visualizations and visual analytic tools that will allow Silas to explore and understand the profile of Sailor Shift’s career

    a.  Who has she been most influenced by over time?

    b.  Who has she collaborated with and directly or indirectly influenced?

    c.  How has she influenced collaborators of the broader Oceanus Folk community?

2.  Develop visualizations that illustrate how the influence of Oceanus Folk has spread through the musical world.

    a.  Was this influence intermittent or did it have a gradual rise?

    b.  What genres and top artists have been most influenced by Oceanus Folk?

    c.  On the converse, how has Oceanus Folk changed with the rise of Sailor Shift? From which genres does it draw most of its contemporary inspiration?

3.  Use your visualizations to develop a profile of what it means to be a rising star in the music industry.

    a.  Visualize the careers of three artists. Compare and contrast their rise in popularity and influence.

    b.  Using this characterization, give three predictions of who the next Oceanus Folk stars with be over the next five years.

# 3 Getting Started

## 3.1 Load the packages

In the code chunk below, `p_load()` of **pacman** package is used to load the R packages into R environemnt.

```{r}
pacman::p_load(tidyverse, jsonlite,
               tidygraph, ggraph)
```

## 3.2 Importing Knowledge Graph Data

In the code chunk below, `fromJSON()` of **jsonlite** package is used to import *MC1_graph.json* file into R and save the output object.

```{r}
kg <- fromJSON("MC1/data/MC1_graph.json")
```

### 3.2.1 Inspect structure

In the code chunk below `str()` is used to reveal the structure of *kg* object.

```{r}
str(kg, max.level = 1)
```

## 3.3 Extracting the edges and nodes tables

Next, `as_tibble()` of **tibble** package package is used to extract the nodes and links tibble data frames from *kg* object into two separate tibble data frames called *nodes_tbl* and *edges_tbl* respectively.

```{r}
nodes_tbl <- as_tibble(kg$nodes)
edges_tbl <- as_tibble(kg$links) 
```

## 3.4 Initial EDA

Apply appropriate EDA methods to examine the data.

In this code chunk below, ggplot2 functions are used the reveal the frequency distribution of *Edge Type* field of *edges_tbl*.

```{r}
ggplot(data = edges_tbl,
       aes(y = `Edge Type`)) +
  geom_bar()
```

On the other hands, code chunk below uses ggplot2 functions to reveal the frequency distribution of *Node Type* field of *nodes_tbl*.

```{r}
ggplot(data = nodes_tbl,
       aes(y = `Node Type`)) +
  geom_bar()
```

## 3.5 Creating Knowledge Graph

### 3.5.1 Mapping the node id to row index

Before going ahead to build the tidygraph object, it is important to ensure each id from the node list is mapped to the correct row number. This requirement can be achive by using the code chunk below.

```{r}
id_map <- tibble(id = nodes_tbl$id,
                 index = seq_len(
                   nrow(nodes_tbl)))
```

### 3.5.2 Map source and target IDs to row indices

Next, map the source and the target IDs to row indices by using the code chunk below.

```{r}
edges_tbl <- edges_tbl %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from = index) %>%
  left_join(id_map, by = c("target" = "id")) %>%
  rename(to = index)
```

### 3.5.3 Filter out any unmatched (invalid) edges

The following code chunk will be used to exclude the unmatched edges.

```{r}
edges_tbl <- edges_tbl %>%
  filter(!is.na(from), !is.na(to))
```

### 3.5.4 Creating tidygraph

Create a tidygraph's graph object by using the code chunk below.

```{r}
graph <- tbl_graph(nodes = nodes_tbl, 
                   edges = edges_tbl, 
                   directed = kg$directed)
```

Use the following code chunk to confirm the output object is indeed in tidygraph format

```{r}
class(graph)
```

### 3.6 Visualising the Knowledge Graph

In this section, use ggraph’s functions to visualise and analyse the graph object.

Several of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.

```{r}
set.seed(1234)
```

### 3.6.1 Visualising the whole graph

In the code chunk below, ggraph functions are used to visualise the whole graph.

```{r}
ggraph(graph, layout = "fr") +
  geom_edge_link(alpha = 0.3, 
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`), 
                  size = 4) +
  geom_node_text(aes(label = name), 
                 repel = TRUE, 
                 size = 2.5) +
  theme_void()
```

Notice that the whole graph is very messy and it is hard to discover any useful patterns. This is always the case in graph visualisation and analysis. In order to gain meaningful visual discovery, it is always useful to look into the details, for example by plotting sub-graphs.

### 3.6.2 Visualising the sub-graph

In this section, create a sub-graph base on *MemberOf* value in *Edge Type* column of the *edges* data frame.

#### Filtering edges to only "MemberOf"

```{r}
graph_memberof <- graph %>%
  activate(edges) %>%
  filter(`Edge Type` == "MemberOf")
```

#### Extracting only connected nodes (i.e., used in these edges)

```{r}
used_node_indices <- graph_memberof %>%
  activate(edges) %>%
  as_tibble() %>%
  select(from, to) %>%
  unlist() %>%
  unique()
```

#### Keeping only those nodes

```{r}
graph_memberof <- graph_memberof %>%
  activate(nodes) %>%
  mutate(row_id = row_number()) %>%
  filter(row_id %in% used_node_indices) %>%
  select(-row_id)  # optional cleanup
```

#### Plotting the sub-graph

```{r}
ggraph(graph_memberof, 
       layout = "fr") +
  geom_edge_link(alpha = 0.5, 
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`), 
                  size = 1) +
  geom_node_text(aes(label = name), 
                 repel = TRUE, 
                 size = 2.5) +
  theme_void()
```

Notice that the sub-graph above is very clear and the relationship between musical group and person can be visualise easily.
