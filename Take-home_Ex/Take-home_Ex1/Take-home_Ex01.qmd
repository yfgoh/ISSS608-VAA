---
title: "Take-home Exercise 1 (WIP)"
author: "Yi Fang"
date: "April 30, 2025"
date-modified: "last-modified"
format: html
editor: visual
freeze: true
warning: false
---

**Please note that the following is still a work in progress.**

## 1 Overview

### 1.1 Background

With reference to [Singstat](https://www.singstat.gov.sg/find-data/search-by-theme/population/population-and-population-structure/latest-data), Singapore’s resident population, consisting of citizens and permanent residents, stands at 4.18 million in 2024, with close to 20% of residents aged 65 and above. The population is distributed across 55 planning areas and 332 subzones. Due to the nation’s limited land space, the majority of its highly urbanized residents live in densely populated areas, a trend that will play a crucial role in shaping the country’s future policies and growth.

### 1.2 Objectives

This exercise will assume the role of a graphical editor of a media company planning to release an article on demographic structures and distribution of Singapore in 2024.

The data will be processed by using appropriate **tidyverse** family of packages and the data visualisation will be prepared using **ggplot2** and its extensions.

## 2 Getting started

### 2.1 Load packages

The following R packages will be loaded using the `pacman::p_load()` function.

-   ggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.

-   ggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.

-   hrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.

-   patchwork: an R package for preparing composite figure created using ggplot2.

```{r}
pacman::p_load(ggrepel, patchwork, 
               ggthemes, hrbrthemes,
               tidyverse, ggplot2, dplyr, scales,
               ggdist, ggridges, gridExtra, Hmisc) 
```

### 2.2 Import data

This exercise will be using *Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024* dataset shared by [Department of Statistics, Singapore (DOS)](https://www.singstat.gov.sg/) Proceed to load the dataset with the following code.

```{r}
respop_data <- read_csv("data/respopagesex2024.csv")
```

## 3 Data Wrangling

Using `glimpse()` function, we get an overview of the dataset.

```{r}
glimpse(respop_data)
```

We see that the dataset has 60,424 rows with 6 columns. It also shows the data type for each column.

### 3.1 Check for duplicates

Using the duplicated function, we check for duplicates in the dataset.

```{r}
respop_data[duplicated(respop_data),]
```

As indicated in the results, there are no duplicates.

### 3.2 Check for missing values

Using the code below, we will check for missing values.

```{r}
for(column_name in names(respop_data)) {
  na_count <- sum(is.na(respop_data[[column_name]]))

  if (na_count > 0) {
    message("Column '", column_name, "' has ", na_count, " NA values.")
  }
}
```

### 3.3 Recoding

For Age column, it is categorical due to the inclusion of an open-ended group, `90_and_Over`. For this exercise, `90_and_Over` was recoded to 90 to ensure that Age could be treated as a numeric variable while still including this group in the analysis. This ensures that the data can be properly analysed and visualised. The following code will recode `90_and_Over` to `90` and cast Age as numeric.

```{r}
respop_data_clean <- respop_data %>%
  mutate(Age = ifelse(Age == "90_and_Over", "90", Age)) %>%
  mutate(Age = as.numeric(Age))

```

### 3.4 Creating new column

With reference to [URA Master Plan 2025](https://eservice.ura.gov.sg/maps/?service=MP), the 55 planning areas are classified into their respective regions with the following code.

```{r}
region_mapping <- c(
  "Ang Mo Kio" = "North-East", "Bedok" = "East", "Bishan" = "Central", 
  "Boon Lay" = "West", "Bukit Batok" = "West", "Bukit Merah" = "Central", 
  "Bukit Panjang" = "West", "Bukit Timah" = "Central", "Central Water Catchment" = "North", 
  "Changi" = "East", "Changi Bay" = "East", "Choa Chu Kang" = "West", 
  "Clementi" = "West", "Downtown Core" = "Central", "Geylang" = "Central", 
  "Hougang" = "North-East", "Jurong East" = "West", "Jurong West" = "West", 
  "Kallang" = "Central", "Lim Chu Kang" = "North", "Mandai" = "North", 
  "Marina East" = "Central", "Marina South" = "Central", "Marine Parade" = "Central", 
  "Museum" = "Central", "Newton" = "Central", "North-Eastern Islands" = "North-East", 
  "Novena" = "Central", "Orchard" = "Central", "Outram" = "Central", 
  "Pasir Ris" = "East", "Paya Lebar" = "East", "Pioneer" = "West", 
  "Punggol" = "North-East", "Queenstown" = "Central", "River Valley" = "Central", 
  "Rochor" = "Central", "Seletar" = "North-East", "Sembawang" = "North", 
  "Sengkang" = "North-East", "Serangoon" = "North-East", "Simpang" = "North", 
  "Singapore River" = "Central", "Southern Islands" = "Central", "Straits View" = "Central", 
  "Sungei Kadut" = "North", "Tampines" = "East", "Tanglin" = "Central", 
  "Tengah" = "West", "Toa Payoh" = "Central", "Tuas" = "West", 
  "Western Islands" = "West", "Western Water Catchment" = "West", "Woodlands" = "North", 
  "Yishun" = "North"
)

respop_data_clean <- respop_data_clean %>%
  mutate(Region = region_mapping[PA])

```

## 4 Data visualisation

### 4.1 Age-Sex Pyramid on a National Level

::: panel-tabset
## The plot

```{r}
#| echo: false
#| fig-width: 13
# Prepare data for Population Pyramid
national_data <- respop_data_clean %>%
  group_by(Age, Sex) %>%
  summarise(Total = sum(Pop, na.rm = TRUE), .groups = 'drop') %>%
  mutate(
    Age = as.integer(Age),
    Total = ifelse(Sex == "Males", -Total, Total)  # Make male population negative for pyramid
  )

# Population Pyramid plot
pyramid_plot <- ggplot(national_data, aes(x = Age, y = Total, fill = Sex)) +
  geom_bar(stat = "identity") +
  coord_flip() +  # Flip the plot to create a pyramid shape
  scale_y_continuous(labels = scales::comma_format(accuracy = 1), breaks = scales::pretty_breaks()) +  # Format y-axis
  labs(
    title = "Population Pyramid",
    x = "Age",
    y = "Population",
    fill = "Sex"
  ) +
  theme_minimal() +  
  geom_vline(xintercept = 65, linetype = "dashed", color = "black", size = 1) +
  geom_vline(xintercept = 42.8, linetype = "dashed", color = "black", size = 1) +
  annotate("text", x = 65, y = 0, label = "Age 65", color = "black", vjust = -0.5, hjust = -0.1) +
  annotate("text", x = 42.8, y = 0, label = "Median Age = 42.8", color = "black", vjust = -0.5, hjust = -0.1) +
  scale_fill_manual(values = c("Males" = "steelblue", "Females" = "salmon"))

# Prepare data for 100% Stacked Bar Chart
stacked_data <- respop_data_clean %>%
  group_by(Age, Sex) %>%
  summarise(Pop = sum(Pop, na.rm = TRUE), .groups = "drop") %>%
  group_by(Age) %>%
  mutate(Proportion = Pop / sum(Pop)) %>%
  ungroup()

# 100% Stacked Bar Chart plot
stacked_bar_plot <- ggplot(stacked_data, aes(x = as.integer(Age), y = Proportion, fill = Sex)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(labels = scales::percent_format()) +
  scale_x_continuous(breaks = seq(0, 90, 10)) +
  labs(
    title = "Age-Sex Distribution",
    x = "Age",
    y = "Proportion within Age Group",
    fill = "Sex"
  ) +
  theme_minimal() +
  scale_fill_manual(values = c("Males" = "steelblue", "Females" = "salmon"))

# Arrange both plots side by side
grid.arrange(pyramid_plot, stacked_bar_plot, ncol = 2)
```

## The code

```{r}
#| eval: false
# Prepare data for Population Pyramid
national_data <- respop_data_clean %>%
  group_by(Age, Sex) %>%
  summarise(Total = sum(Pop, na.rm = TRUE), .groups = 'drop') %>%
  mutate(
    Age = as.integer(Age),
    Total = ifelse(Sex == "Males", -Total, Total)  # Make male population negative for pyramid
  )

# Population Pyramid plot
pyramid_plot <- ggplot(national_data, aes(x = Age, y = Total, fill = Sex)) +
  geom_bar(stat = "identity") +
  coord_flip() +  # Flip the plot to create a pyramid shape
  scale_y_continuous(labels = scales::comma_format(accuracy = 1), breaks = scales::pretty_breaks()) +  # Format y-axis
  labs(
    title = "Population Pyramid",
    x = "Age",
    y = "Population",
    fill = "Sex"
  ) +
  theme_minimal() + 
  geom_vline(xintercept = 65, linetype = "dashed", color = "black", size = 1) +
  geom_vline(xintercept = 42.8, linetype = "dashed", color = "black", size = 1) +
  annotate("text", x = 65, y = 0, label = "Age 65", color = "black", vjust = -0.5, hjust = -0.1) +
  annotate("text", x = 42.8, y = 0, label = "Median Age = 42.8", color = "black", vjust = -0.5, hjust = -0.1) +
  scale_fill_manual(values = c("Males" = "steelblue", "Females" = "salmon"))

# Prepare data for 100% Stacked Bar Chart
stacked_data <- respop_data_clean %>%
  group_by(Age, Sex) %>%
  summarise(Pop = sum(Pop, na.rm = TRUE), .groups = "drop") %>%
  group_by(Age) %>%
  mutate(Proportion = Pop / sum(Pop)) %>%
  ungroup()

# 100% Stacked Bar Chart plot
stacked_bar_plot <- ggplot(stacked_data, aes(x = as.integer(Age), y = Proportion, fill = Sex)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(labels = scales::percent_format()) +
  scale_x_continuous(breaks = seq(0, 90, 10)) +
  labs(
    title = "Age-Sex Distribution",
    x = "Age",
    y = "Proportion within Age Group",
    fill = "Sex"
  ) +
  theme_minimal() +
  scale_fill_manual(values = c("Males" = "steelblue", "Females" = "salmon"))

# Arrange both plots side by side
grid.arrange(pyramid_plot, stacked_bar_plot, ncol = 2)
```
:::

**Insights**

-   The national population pyramid highlights an ageing demographic, with a prominent bulge at the center of the pyramid. This bulge represents the largest cohort, aged 40 to 54, signals a maturing population.
-   Furthermore, a notable proportion of individuals fall within the age range of the median age of 42.8 (Singstat, 2024) to 65, the threshold for senior citizens, highlighting the growing proportion of elderly residents.
-   In contrast, the narrowing base below the median age reflects persistently low birth rates and a shrinking younger population.
-   The overall shape of the pyramid is symmetrical, indicating a relatively balanced distribution between males and females. However, the females slightly outnumber males in the older age, especially from the late 70s as seen in the stacked bar chart.

### 4.2 Age group distribution across regions

::: panel-tabset
## The plot

```{r}
#| echo: false
#| fig-width: 13
age_group_plot <- respop_data_clean %>%
  mutate(Age_Group = cut(Age, breaks = c(0, 14, 24, 44, 64, Inf),
                         labels = c("0-14", "15-24", "25-44", "45-64", "65+"))) %>%
  filter(!is.na(Age_Group)) %>%  
  group_by(Region, Age_Group) %>%
  summarise(Total_Pop = sum(Pop, na.rm = TRUE), .groups = "drop") %>%
  mutate(Region = fct_reorder(Region, Total_Pop, .fun = sum, .desc = TRUE)) %>%
  ggplot(aes(x = Region, y = Total_Pop, fill = Age_Group)) +
  geom_bar(stat = "identity") +
  labs(title = "Age Group Distribution by Region",
       x = "Region", y = "Population", fill = "Age Group") +
  scale_fill_manual(values = c("0-14" = "#FFB6C1",
                               "15-24" = "#B3D9FF", 
                               "25-44" = "#A7D8C7", 
                               "45-64" = "#FFD1A9",  
                               "65+" = "#E0B0FF")) +  
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Second plot (Slope Chart for Youth vs Senior Population)
youth_senior_data <- respop_data_clean %>%
  mutate(Age_Group = case_when(
    Age <= 24 ~ "Youth (0–24)",
    Age >= 65 ~ "Senior (65+)",
    TRUE ~ NA_character_
  )) %>%
  filter(!is.na(Age_Group)) %>%
  group_by(Region, Age_Group) %>%
  summarise(Total_Pop = sum(Pop, na.rm = TRUE), .groups = "drop") %>%
  pivot_wider(names_from = Age_Group, values_from = Total_Pop) %>%
  mutate(
    `Youth-to-Senior Ratio` = `Youth (0–24)` / `Senior (65+)`
  ) %>%
  pivot_longer(
    cols = c(`Youth (0–24)`, `Senior (65+)`),
    names_to = "Group",
    values_to = "Population"
  )

# Slope chart plot
slope_chart_plot <- ggplot(youth_senior_data, aes(x = Group, y = Population, group = Region)) +
  geom_line(aes(color = Region), size = 1) +
  geom_point(aes(color = Region), size = 3) +
  labs(title = "Youth vs Senior Population by Region",
       subtitle = "Comparing age structure across regions using a slope chart",
       x = "", y = "Population") +
  theme_minimal() +
  theme(legend.position = "right")

# Combine both plots side by side
age_group_plot + slope_chart_plot
```

## The code

```{r}
#| eval: false
age_group_plot <- respop_data_clean %>%
  mutate(Age_Group = cut(Age, breaks = c(0, 14, 24, 44, 64, Inf),
                         labels = c("0-14", "15-24", "25-44", "45-64", "65+"))) %>%
  filter(!is.na(Age_Group)) %>%  
  group_by(Region, Age_Group) %>%
  summarise(Total_Pop = sum(Pop, na.rm = TRUE), .groups = "drop") %>%
  mutate(Region = fct_reorder(Region, Total_Pop, .fun = sum, .desc = TRUE)) %>%
  ggplot(aes(x = Region, y = Total_Pop, fill = Age_Group)) +
  geom_bar(stat = "identity") +
  labs(title = "Age Group Distribution by Region",
       x = "Region", y = "Population", fill = "Age Group") +
  scale_fill_manual(values = c("0-14" = "#FFB6C1",
                               "15-24" = "#B3D9FF", 
                               "25-44" = "#A7D8C7", 
                               "45-64" = "#FFD1A9",  
                               "65+" = "#E0B0FF")) +  
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Second plot (Slope Chart for Youth vs Senior Population)
youth_senior_data <- respop_data_clean %>%
  mutate(Age_Group = case_when(
    Age <= 24 ~ "Youth (0–24)",
    Age >= 65 ~ "Senior (65+)",
    TRUE ~ NA_character_
  )) %>%
  filter(!is.na(Age_Group)) %>%
  group_by(Region, Age_Group) %>%
  summarise(Total_Pop = sum(Pop, na.rm = TRUE), .groups = "drop") %>%
  pivot_wider(names_from = Age_Group, values_from = Total_Pop) %>%
  mutate(
    `Youth-to-Senior Ratio` = `Youth (0–24)` / `Senior (65+)`
  ) %>%
  pivot_longer(
    cols = c(`Youth (0–24)`, `Senior (65+)`),
    names_to = "Group",
    values_to = "Population"
  )

# Slope chart plot
slope_chart_plot <- ggplot(youth_senior_data, aes(x = Group, y = Population, group = Region)) +
  geom_line(aes(color = Region), size = 1) +
  geom_point(aes(color = Region), size = 3) +
  labs(title = "Youth vs Senior Population by Region",
       subtitle = "Comparing age structure across regions using a slope chart",
       x = "", y = "Population") +
  theme_minimal() +
  theme(legend.position = "right")

# Combine both plots side by side
age_group_plot + slope_chart_plot
```
:::

**Insights**

-   The North-East region is the most populous, followed closely by the Central and West regions. In contrast, the East and North regions have significantly smaller populations.

-   The North-East also has the highest proportion of children aged 0–14, reinforcing its reputation as a family-oriented region popular with young households.

-   The Central region has the highest concentration of senior citizens (aged 65 and above), followed by the North-East and West regions, while the North region has the smallest senior population.

-   Age groups of 0-14 and 15-24 remain relatively small across all regions, reflecting a broader national trend of declining birth rates.

- The Central region stands out with a near-equal number of youths (aged 0–24) and seniors (65+). Despite signs of ageing, each region still has more youths than seniors, highlighting the continued presence of younger populations alongside an ageing demographic.

### 4.3

```{r}
# Prepare the data: make sure Age is numeric and Region is a factor
respop_data_clean <- respop_data_clean %>%
  mutate(Age = as.numeric(Age),
         Region = as.factor(Region))

# Histogram with Population as weight
ggplot(respop_data_clean, aes(x = Age, weight = Pop, fill = Region)) +
  geom_histogram(binwidth = 1, alpha = 0.6, position = "stack") +
  facet_wrap(~ Region, scales = "free_y") +  # Faceting by Region
  labs(title = "Age Distribution Across Regions in Singapore (2024)",
       subtitle = "Histogram showing the population distribution by age and region",
       x = "Age", y = "Population") +
  theme_minimal() +
  scale_fill_viridis_d(name = "Region") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(size = 9),
        axis.title.y = element_text(angle = 0, vjust = 0.5, hjust = 1))
```

```{r}
# Ensure Age is numeric and Pop is used as the weight
respop_data_clean <- respop_data_clean %>%
  mutate(Age = as.numeric(Age))  # Ensure Age is numeric

# Create weighted violin plot for Age distribution across regions
ggplot(respop_data_clean, aes(x = Region, y = Age, weight = Pop, fill = Region)) +
  geom_violin(alpha = 0.6) +  # Violin plot with transparency
  labs(title = "Age Distribution Across Regions in Singapore (2024)",
       subtitle = "Violin plot showing the age distribution by region, weighted by population",
       x = "Region", y = "Age") +
  theme_minimal() +
  scale_fill_viridis_d(name = "Region") +  # Color by Region
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(size = 9),
        axis.title.y = element_text(angle = 0, vjust = 0.5, hjust = 1),
        axis.title.x = element_text(vjust = 0.5),
        strip.text = element_text(size = 10))  # Adjust facet label size

```

```{r}
ggplot(respop_data_clean, aes(x = Age, weight = Pop, fill = Sex)) +
  geom_density(alpha = 0.6) +
  facet_wrap(~ Region, ncol = 1, scales = "free_y") +
  labs(
    title = "Age Distribution by Region and Gender (2024)",
    x = "Age",
    y = "Density"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    strip.text = element_text(face = "bold"),
    axis.text.y = element_blank(),
    legend.title = element_blank()
  ) +
  scale_fill_manual(values = c("Males" = "steelblue", "Females" = "salmon"))
```

```{r}
# Prepare the data: make sure Age is numeric and Region is a factor
respop_data_clean <- respop_data_clean %>%
  mutate(Age = as.numeric(Age),
         Region = as.factor(Region))

# Histogram with Population as weight, vertically stacked by Region
ggplot(respop_data_clean, aes(x = Age, weight = Pop, fill = Region)) +
  geom_histogram(binwidth = 1, alpha = 0.6, position = "stack") +
  facet_wrap(~ Region, ncol = 1, scales = "free_y") +  # <-- ncol = 1 for vertical stacking
  labs(title = "Age Distribution Across Regions in Singapore (2024)",
       subtitle = "Histogram showing the population distribution by age and region",
       x = "Age", y = "Population") +
  theme_minimal() +
  scale_fill_viridis_d(name = "Region") +
  theme(
    plot.title = element_text(hjust = 0.5),
    plot.subtitle = element_text(size = 9),
    axis.title.y = element_text(angle = 0, vjust = 0.5, hjust = 1)
  )


```



```{r}
respop_data_clean %>%
  ggplot(aes(x = Age, y = Region, 
             height = after_stat(density), 
             fill = Region, weight = Pop)) +
  geom_density_ridges(stat = "density", scale = 3, alpha = 0.7, color = "white") +
  labs(title = "Weighted Age Density Distribution by Region",
       x = "Age", y = "Region") +
  theme_minimal() +
  theme(legend.position = "none")
```


```{r}
box_data <- respop_data_clean %>%
  group_by(Region) %>%
  summarise(
    Min = wtd.quantile(Age, weights = Pop, probs = 0, na.rm = TRUE),
    Q1 = wtd.quantile(Age, weights = Pop, probs = 0.25, na.rm = TRUE),
    Median = wtd.quantile(Age, weights = Pop, probs = 0.5, na.rm = TRUE),
    Mean = weighted.mean(Age, w = Pop, na.rm = TRUE),
    Q3 = wtd.quantile(Age, weights = Pop, probs = 0.75, na.rm = TRUE),
    Max = wtd.quantile(Age, weights = Pop, probs = 1, na.rm = TRUE),
    .groups = "drop"
  )

# Create the plot with weighted quantiles
ggplot(box_data, aes(y = Region)) +  # Set y = Region for the horizontal plot
  # Boxplot elements using geom_segment
  geom_segment(aes(x = Min, xend = Max, y = Region, yend = Region), size = 1, color = "black") +  # Whiskers (Min, Max)
  geom_segment(aes(x = Q1, xend = Q3, y = Region, yend = Region), size = 5, color = "#8593B5") +  # Box (Q1 to Q3)
  geom_point(aes(x = Mean, y = Region), size = 4, color = "#8F6798") +  # Mean as dot
  geom_segment(aes(x = Median, xend = Median, y = Region, yend = Region), size = 1.5, color = "red") +  # Median line inside box
  labs(title = "Horizontal Weighted Boxplot of Age by Region",
       x = "Age", y = "Region") +
  theme_minimal() +
  theme(axis.text.y = element_text(angle = 45, hjust = 1)) +
  coord_cartesian(xlim = c(0, 100))
```


## 5 Reference

-   [Singstat](https://www.singstat.gov.sg/find-data/search-by-theme/population/population-and-population-structure/latest-data)
